Recursion on Subsequences:

#include <iostream>
#include <vector>
using namespace std;

void allcombination(int index, vector<int> &ds, int arr[], int n) {
    if (index == n) {  // Base case: if index reaches the array size
        if (ds.size() == 0) {  // If no elements were picked
            cout << "{}";
        } else {
            for (auto it : ds) {
                cout << it << " ";
            }
        }
        cout << endl;
        return;
    }
    
    // Element not picked
    allcombination(index + 1, ds, arr, n);
    
    // Element picked
    ds.push_back(arr[index]);
    allcombination(index + 1, ds, arr, n);
    ds.pop_back();  // Backtrack to remove the element
}

int main() {
    int arr[] = {3, 1, 2};  
    int n = 3;  // Size of the array
    vector<int> ds;  // Vector to store subsequences
    allcombination(0, ds, arr, n);  // Initial function call
    return 0;
}
